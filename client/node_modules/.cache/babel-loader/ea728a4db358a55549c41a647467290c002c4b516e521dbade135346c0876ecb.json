{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import axios from'axios';// Интерфейс пользователя\n// Интерфейс для обновления профиля\n// Интерфейс контекста аутентификации\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Создание контекста\nconst AuthContext=/*#__PURE__*/createContext(undefined);// API URL\nconst API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Хук для использования контекста аутентификации\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};// Провайдер контекста аутентификации\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[token,setToken]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);const[isAdmin,setIsAdmin]=useState(false);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Инициализация состояния аутентификации из localStorage\nuseEffect(()=>{const storedUser=localStorage.getItem('user');const storedToken=localStorage.getItem('token');if(storedUser&&storedToken){try{const parsedUser=JSON.parse(storedUser);setUser(parsedUser);setToken(storedToken);setIsAuthenticated(true);setIsAdmin(parsedUser.isAdmin||false);}catch(err){console.error('Ошибка при разборе данных пользователя:',err);localStorage.removeItem('user');localStorage.removeItem('token');}}setLoading(false);},[]);// Настройка axios с токеном\nuseEffect(()=>{if(token){axios.defaults.headers.common['Authorization']=`Bearer ${token}`;}else{delete axios.defaults.headers.common['Authorization'];}},[token]);// Логин пользователя\nconst login=async(email,password)=>{setLoading(true);setError(null);try{const response=await axios.post(`${API_URL}/auth/login`,{email,password});const{user,token}=response.data;setUser(user);setToken(token);setIsAuthenticated(true);setIsAdmin(user.isAdmin||false);localStorage.setItem('user',JSON.stringify(user));localStorage.setItem('token',token);}catch(err){var _err$response,_err$response$data;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.message)||'Ошибка при входе. Пожалуйста, проверьте email и пароль.');}finally{setLoading(false);}};// Регистрация пользователя\nconst register=async(name,email,password)=>{setLoading(true);setError(null);try{const response=await axios.post(`${API_URL}/auth/register`,{name,email,password});const{user,token}=response.data;setUser(user);setToken(token);setIsAuthenticated(true);setIsAdmin(user.isAdmin||false);localStorage.setItem('user',JSON.stringify(user));localStorage.setItem('token',token);}catch(err){var _err$response2,_err$response2$data;setError(((_err$response2=err.response)===null||_err$response2===void 0?void 0:(_err$response2$data=_err$response2.data)===null||_err$response2$data===void 0?void 0:_err$response2$data.message)||'Ошибка при регистрации. Возможно, пользователь с таким email уже существует.');}finally{setLoading(false);}};// Выход из системы\nconst logout=()=>{setUser(null);setToken(null);setIsAuthenticated(false);setIsAdmin(false);localStorage.removeItem('user');localStorage.removeItem('token');};// Обновление профиля пользователя\nconst updateUserProfile=async data=>{setLoading(true);setError(null);try{const response=await axios.put(`${API_URL}/users/profile`,data);const updatedUser=response.data;setUser(updatedUser);localStorage.setItem('user',JSON.stringify(updatedUser));}catch(err){var _err$response3,_err$response3$data;setError(((_err$response3=err.response)===null||_err$response3===void 0?void 0:(_err$response3$data=_err$response3.data)===null||_err$response3$data===void 0?void 0:_err$response3$data.message)||'Ошибка при обновлении профиля.');throw err;}finally{setLoading(false);}};// Очистка ошибки\nconst clearError=()=>{setError(null);};// Значение контекста\nconst value={user,token,isAuthenticated,isAdmin,loading,error,login,register,logout,updateUserProfile,clearError};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsx","_jsx","AuthContext","undefined","API_URL","process","env","REACT_APP_API_URL","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","loading","setLoading","error","setError","storedUser","localStorage","getItem","storedToken","parsedUser","JSON","parse","err","console","removeItem","defaults","headers","common","login","email","password","response","post","data","setItem","stringify","_err$response","_err$response$data","message","register","name","_err$response2","_err$response2$data","logout","updateUserProfile","put","updatedUser","_err$response3","_err$response3$data","clearError","value","Provider"],"sources":["C:/Users/Данил Тимеев/Documents/GitHub/DVIG/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Интерфейс пользователя\r\nexport interface User {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  isAdmin: boolean;\r\n}\r\n\r\n// Интерфейс для обновления профиля\r\ninterface UpdateProfileData {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\n// Интерфейс контекста аутентификации\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  isAdmin: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (name: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  updateUserProfile: (data: UpdateProfileData) => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\n// Создание контекста\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Хук для использования контекста аутентификации\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Провайдер контекста аутентификации\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Инициализация состояния аутентификации из localStorage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n    \r\n    if (storedUser && storedToken) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n        setToken(storedToken);\r\n        setIsAuthenticated(true);\r\n        setIsAdmin(parsedUser.isAdmin || false);\r\n      } catch (err) {\r\n        console.error('Ошибка при разборе данных пользователя:', err);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Настройка axios с токеном\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [token]);\r\n\r\n  // Логин пользователя\r\n  const login = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n      const { user, token } = response.data;\r\n      \r\n      setUser(user);\r\n      setToken(token);\r\n      setIsAuthenticated(true);\r\n      setIsAdmin(user.isAdmin || false);\r\n      \r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n    } catch (err) {\r\n      setError(\r\n        err.response?.data?.message || \r\n        'Ошибка при входе. Пожалуйста, проверьте email и пароль.'\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Регистрация пользователя\r\n  const register = async (name: string, email: string, password: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/register`, {\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      const { user, token } = response.data;\r\n      \r\n      setUser(user);\r\n      setToken(token);\r\n      setIsAuthenticated(true);\r\n      setIsAdmin(user.isAdmin || false);\r\n      \r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n    } catch (err) {\r\n      setError(\r\n        err.response?.data?.message || \r\n        'Ошибка при регистрации. Возможно, пользователь с таким email уже существует.'\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Выход из системы\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setIsAdmin(false);\r\n    \r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  // Обновление профиля пользователя\r\n  const updateUserProfile = async (data: UpdateProfileData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.put(`${API_URL}/users/profile`, data);\r\n      const updatedUser = response.data;\r\n      \r\n      setUser(updatedUser);\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    } catch (err) {\r\n      setError(\r\n        err.response?.data?.message || \r\n        'Ошибка при обновлении профиля.'\r\n      );\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Очистка ошибки\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  // Значение контекста\r\n  const value = {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    isAdmin,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUserProfile,\r\n    clearError,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}