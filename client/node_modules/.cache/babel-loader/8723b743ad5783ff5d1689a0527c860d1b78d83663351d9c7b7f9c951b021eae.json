{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';// Создаем экземпляр axios с базовым URL\nconst api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Интерцептор для добавления токена в запросы\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Интерфейсы для данных\n// API сервисы\nexport const motorService={// Получение всех моторов с фильтрацией\ngetAllMotors:async params=>{const response=await api.get('/motors',{params});return response.data;},// Получение мотора по ID\ngetMotorById:async id=>{const response=await api.get(`/motors/${id}`);return response.data;},// Получение топовых моторов\ngetTopMotors:async()=>{const response=await api.get('/motors/top');return response.data;},// Получение моторов по категории\ngetMotorsByCategory:async category=>{const response=await api.get(`/motors/category/${category}`);return response.data;},// Получение категорий моторов\ngetMotorCategories:async()=>{const response=await api.get('/motors/categories');return response.data;},// Получение брендов моторов\ngetMotorBrands:async()=>{const response=await api.get('/motors/brands');return response.data;},// Получение производителей моторов\ngetMotorManufacturers:async()=>{const response=await api.get('/motors/manufacturers');return response.data;},// Создание отзыва о моторе\ncreateMotorReview:async(id,review)=>{const response=await api.post(`/motors/${id}/reviews`,review);return response.data;}};export const orderService={// Создание заказа\ncreateOrder:async orderData=>{const response=await api.post('/orders',orderData);return response.data;},// Получение заказа по ID\ngetOrderById:async id=>{const response=await api.get(`/orders/${id}`);return response.data;},// Получение заказов пользователя\ngetUserOrders:async()=>{const response=await api.get('/orders/myorders');return response.data;},// Обновление статуса оплаты заказа\nupdateOrderToPaid:async(id,paymentResult)=>{const response=await api.put(`/orders/${id}/pay`,paymentResult);return response.data;}};export const userService={// Получение профиля пользователя\ngetUserProfile:async()=>{const response=await api.get('/users/profile');return response.data;},// Обновление профиля пользователя\nupdateUserProfile:async userData=>{const response=await api.put('/users/profile',userData);return response.data;}};export const adminService={// Получение всех пользователей (только для администратора)\ngetAllUsers:async()=>{const response=await api.get('/admin/users');return response.data;},// Удаление пользователя (только для администратора)\ndeleteUser:async id=>{const response=await api.delete(`/admin/users/${id}`);return response.data;},// Получение пользователя по ID (только для администратора)\ngetUserById:async id=>{const response=await api.get(`/admin/users/${id}`);return response.data;},// Обновление пользователя (только для администратора)\nupdateUser:async(id,userData)=>{const response=await api.put(`/admin/users/${id}`,userData);return response.data;},// Создание нового мотора (только для администратора)\ncreateMotor:async motorData=>{const response=await api.post('/motors',motorData);return response.data;},// Удаление мотора (только для администратора)\ndeleteMotor:async id=>{const response=await api.delete(`/motors/${id}`);return response.data;},// Обновление мотора (только для администратора)\nupdateMotor:async(id,motorData)=>{const response=await api.put(`/motors/${id}`,motorData);return response.data;},// Получение всех заказов (только для администратора)\ngetAllOrders:async()=>{const response=await api.get('/admin/orders');return response.data;},// Обновление статуса доставки заказа (только для администратора)\nupdateOrderToDelivered:async id=>{const response=await api.put(`/admin/orders/${id}/deliver`);return response.data;}};export default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","motorService","getAllMotors","params","response","get","data","getMotorById","id","getTopMotors","getMotorsByCategory","category","getMotorCategories","getMotorBrands","getMotorManufacturers","createMotorReview","review","post","orderService","createOrder","orderData","getOrderById","getUserOrders","updateOrderToPaid","paymentResult","put","userService","getUserProfile","updateUserProfile","userData","adminService","getAllUsers","deleteUser","delete","getUserById","updateUser","createMotor","motorData","deleteMotor","updateMotor","getAllOrders","updateOrderToDelivered"],"sources":["C:/Users/Данил Тимеев/Documents/GitHub/DVIG/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Создаем экземпляр axios с базовым URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Интерцептор для добавления токена в запросы\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Интерфейсы для данных\r\nexport interface Motor {\r\n  _id: string;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image: string;\r\n  images: string[];\r\n  brand: string;\r\n  category: string;\r\n  manufacturer: string;\r\n  power: number;\r\n  weight: number;\r\n  dimensions: {\r\n    length: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n  voltage?: number;\r\n  rpm?: number;\r\n  efficiency?: number;\r\n  fuelType?: string;\r\n  yearOfManufacture?: number;\r\n  warranty?: number;\r\n  countInStock: number;\r\n  rating: number;\r\n  numReviews: number;\r\n  reviews: Review[];\r\n  features: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Review {\r\n  _id: string;\r\n  user: {\r\n    _id: string;\r\n    name: string;\r\n  };\r\n  rating: number;\r\n  comment: string;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface Order {\r\n  _id: string;\r\n  user: string;\r\n  items: {\r\n    motor: Motor;\r\n    quantity: number;\r\n    price: number;\r\n  }[];\r\n  shippingAddress: {\r\n    address: string;\r\n    city: string;\r\n    postalCode: string;\r\n    country: string;\r\n  };\r\n  paymentMethod: string;\r\n  paymentResult?: {\r\n    id: string;\r\n    status: string;\r\n    updateTime: string;\r\n  };\r\n  totalPrice: number;\r\n  isPaid: boolean;\r\n  isDelivered: boolean;\r\n  paidAt?: string;\r\n  deliveredAt?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// API сервисы\r\nexport const motorService = {\r\n  // Получение всех моторов с фильтрацией\r\n  getAllMotors: async (params?: {\r\n    page?: number;\r\n    keyword?: string;\r\n    category?: string;\r\n    brand?: string;\r\n    manufacturer?: string;\r\n    minPrice?: number;\r\n    maxPrice?: number;\r\n    minPower?: number;\r\n    maxPower?: number;\r\n    sortBy?: string;\r\n  }) => {\r\n    const response = await api.get('/motors', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Получение мотора по ID\r\n  getMotorById: async (id: string) => {\r\n    const response = await api.get(`/motors/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение топовых моторов\r\n  getTopMotors: async () => {\r\n    const response = await api.get('/motors/top');\r\n    return response.data;\r\n  },\r\n\r\n  // Получение моторов по категории\r\n  getMotorsByCategory: async (category: string) => {\r\n    const response = await api.get(`/motors/category/${category}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение категорий моторов\r\n  getMotorCategories: async () => {\r\n    const response = await api.get('/motors/categories');\r\n    return response.data;\r\n  },\r\n\r\n  // Получение брендов моторов\r\n  getMotorBrands: async () => {\r\n    const response = await api.get('/motors/brands');\r\n    return response.data;\r\n  },\r\n\r\n  // Получение производителей моторов\r\n  getMotorManufacturers: async () => {\r\n    const response = await api.get('/motors/manufacturers');\r\n    return response.data;\r\n  },\r\n\r\n  // Создание отзыва о моторе\r\n  createMotorReview: async (id: string, review: { rating: number; comment: string; name?: string }) => {\r\n    const response = await api.post(`/motors/${id}/reviews`, review);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const orderService = {\r\n  // Создание заказа\r\n  createOrder: async (orderData: {\r\n    items: { motorId: string; quantity: number }[];\r\n    shippingAddress: {\r\n      address: string;\r\n      city: string;\r\n      postalCode: string;\r\n      country: string;\r\n    };\r\n    paymentMethod: string;\r\n  }) => {\r\n    const response = await api.post('/orders', orderData);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение заказа по ID\r\n  getOrderById: async (id: string) => {\r\n    const response = await api.get(`/orders/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение заказов пользователя\r\n  getUserOrders: async () => {\r\n    const response = await api.get('/orders/myorders');\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление статуса оплаты заказа\r\n  updateOrderToPaid: async (id: string, paymentResult: { id: string; status: string; updateTime: string }) => {\r\n    const response = await api.put(`/orders/${id}/pay`, paymentResult);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const userService = {\r\n  // Получение профиля пользователя\r\n  getUserProfile: async () => {\r\n    const response = await api.get('/users/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление профиля пользователя\r\n  updateUserProfile: async (userData: { name?: string; email?: string; password?: string }) => {\r\n    const response = await api.put('/users/profile', userData);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const adminService = {\r\n  // Получение всех пользователей (только для администратора)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/admin/users');\r\n    return response.data;\r\n  },\r\n\r\n  // Удаление пользователя (только для администратора)\r\n  deleteUser: async (id: string) => {\r\n    const response = await api.delete(`/admin/users/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение пользователя по ID (только для администратора)\r\n  getUserById: async (id: string) => {\r\n    const response = await api.get(`/admin/users/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление пользователя (только для администратора)\r\n  updateUser: async (id: string, userData: { name?: string; email?: string; isAdmin?: boolean }) => {\r\n    const response = await api.put(`/admin/users/${id}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Создание нового мотора (только для администратора)\r\n  createMotor: async (motorData: Partial<Motor>) => {\r\n    const response = await api.post('/motors', motorData);\r\n    return response.data;\r\n  },\r\n\r\n  // Удаление мотора (только для администратора)\r\n  deleteMotor: async (id: string) => {\r\n    const response = await api.delete(`/motors/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление мотора (только для администратора)\r\n  updateMotor: async (id: string, motorData: Partial<Motor>) => {\r\n    const response = await api.put(`/motors/${id}`, motorData);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение всех заказов (только для администратора)\r\n  getAllOrders: async () => {\r\n    const response = await api.get('/admin/orders');\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление статуса доставки заказа (только для администратора)\r\n  updateOrderToDelivered: async (id: string) => {\r\n    const response = await api.put(`/admin/orders/${id}/deliver`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}