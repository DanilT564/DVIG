{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0414\\u0430\\u043D\\u0438\\u043B \\u0422\\u0438\\u043C\\u0435\\u0435\\u0432\\\\Documents\\\\GitHub\\\\DVIG\\\\client\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Интерфейс пользователя\n\n// Интерфейс для обновления профиля\n\n// Интерфейс контекста аутентификации\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Создание контекста\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// API URL\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Хук для использования контекста аутентификации\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Провайдер контекста аутентификации\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Инициализация состояния аутентификации из localStorage\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    const storedToken = localStorage.getItem('token');\n    if (storedUser && storedToken) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n        setToken(storedToken);\n        setIsAuthenticated(true);\n        setIsAdmin(parsedUser.isAdmin || false);\n      } catch (err) {\n        console.error('Ошибка при разборе данных пользователя:', err);\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n      }\n    }\n    setLoading(false);\n  }, []);\n\n  // Настройка axios с токеном\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [token]);\n\n  // Логин пользователя\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      setUser(user);\n      setToken(token);\n      setIsAuthenticated(true);\n      setIsAdmin(user.isAdmin || false);\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Ошибка при входе. Пожалуйста, проверьте email и пароль.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Регистрация пользователя\n  const register = async (name, email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post(`${API_URL}/auth/register`, {\n        name,\n        email,\n        password\n      });\n      const {\n        user,\n        token\n      } = response.data;\n      setUser(user);\n      setToken(token);\n      setIsAuthenticated(true);\n      setIsAdmin(user.isAdmin || false);\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Ошибка при регистрации. Возможно, пользователь с таким email уже существует.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Выход из системы\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    setIsAuthenticated(false);\n    setIsAdmin(false);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  // Обновление профиля пользователя\n  const updateUserProfile = async data => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.put(`${API_URL}/users/profile`, data);\n      const updatedUser = response.data;\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Ошибка при обновлении профиля.');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Очистка ошибки\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Значение контекста\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isAdmin,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateUserProfile,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"h9uQ2mJp1IJlkA90z6l54XcVtgE=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","undefined","API_URL","process","env","REACT_APP_API_URL","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","loading","setLoading","error","setError","storedUser","localStorage","getItem","storedToken","parsedUser","JSON","parse","err","console","removeItem","defaults","headers","common","login","email","password","response","post","data","setItem","stringify","_err$response","_err$response$data","message","register","name","_err$response2","_err$response2$data","logout","updateUserProfile","put","updatedUser","_err$response3","_err$response3$data","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Данил Тимеев/Documents/GitHub/DVIG/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Интерфейс пользователя\r\nexport interface User {\r\n  _id: string;\r\n  name: string;\r\n  email: string;\r\n  isAdmin: boolean;\r\n}\r\n\r\n// Интерфейс для обновления профиля\r\ninterface UpdateProfileData {\r\n  name?: string;\r\n  email?: string;\r\n  password?: string;\r\n}\r\n\r\n// Интерфейс контекста аутентификации\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n  isAdmin: boolean;\r\n  loading: boolean;\r\n  error: string | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (name: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  updateUserProfile: (data: UpdateProfileData) => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\n// Создание контекста\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// API URL\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Хук для использования контекста аутентификации\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Провайдер контекста аутентификации\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Инициализация состояния аутентификации из localStorage\r\n  useEffect(() => {\r\n    const storedUser = localStorage.getItem('user');\r\n    const storedToken = localStorage.getItem('token');\r\n    \r\n    if (storedUser && storedToken) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n        setToken(storedToken);\r\n        setIsAuthenticated(true);\r\n        setIsAdmin(parsedUser.isAdmin || false);\r\n      } catch (err) {\r\n        console.error('Ошибка при разборе данных пользователя:', err);\r\n        localStorage.removeItem('user');\r\n        localStorage.removeItem('token');\r\n      }\r\n    }\r\n    \r\n    setLoading(false);\r\n  }, []);\r\n\r\n  // Настройка axios с токеном\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [token]);\r\n\r\n  // Логин пользователя\r\n  const login = async (email: string, password: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n      const { user, token } = response.data;\r\n      \r\n      setUser(user);\r\n      setToken(token);\r\n      setIsAuthenticated(true);\r\n      setIsAdmin(user.isAdmin || false);\r\n      \r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n    } catch (err: any) {\r\n      setError(\r\n        err.response?.data?.message || \r\n        'Ошибка при входе. Пожалуйста, проверьте email и пароль.'\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Регистрация пользователя\r\n  const register = async (name: string, email: string, password: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post(`${API_URL}/auth/register`, {\r\n        name,\r\n        email,\r\n        password,\r\n      });\r\n      \r\n      const { user, token } = response.data;\r\n      \r\n      setUser(user);\r\n      setToken(token);\r\n      setIsAuthenticated(true);\r\n      setIsAdmin(user.isAdmin || false);\r\n      \r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n    } catch (err: any) {\r\n      setError(\r\n        err.response?.data?.message || \r\n        'Ошибка при регистрации. Возможно, пользователь с таким email уже существует.'\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Выход из системы\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    setIsAuthenticated(false);\r\n    setIsAdmin(false);\r\n    \r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  // Обновление профиля пользователя\r\n  const updateUserProfile = async (data: UpdateProfileData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.put(`${API_URL}/users/profile`, data);\r\n      const updatedUser = response.data;\r\n      \r\n      setUser(updatedUser);\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    } catch (err: any) {\r\n      setError(\r\n        err.response?.data?.message || \r\n        'Ошибка при обновлении профиля.'\r\n      );\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Очистка ошибки\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  // Значение контекста\r\n  const value = {\r\n    user,\r\n    token,\r\n    isAuthenticated,\r\n    isAdmin,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateUserProfile,\r\n    clearError,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}