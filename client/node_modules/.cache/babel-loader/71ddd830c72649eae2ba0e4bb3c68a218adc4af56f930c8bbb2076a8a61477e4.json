{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0414\\u0430\\u043D\\u0438\\u043B \\u0422\\u0438\\u043C\\u0435\\u0435\\u0432\\\\Documents\\\\GitHub\\\\DVIG\\\\client\\\\src\\\\contexts\\\\CartContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Типы для товаров в корзине\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext(undefined);\nexport const useCart = () => {\n  _s();\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n};\n_s(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const CartProvider = ({\n  children\n}) => {\n  _s2();\n  const [cart, setCart] = useState([]);\n  const [total, setTotal] = useState(0);\n  const [totalItems, setTotalItems] = useState(0);\n\n  // Загрузка корзины из localStorage при инициализации\n  useEffect(() => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        const parsedCart = JSON.parse(savedCart);\n        setCart(parsedCart);\n      } catch (error) {\n        console.error('Ошибка при загрузке корзины:', error);\n      }\n    }\n  }, []);\n\n  // Сохранение корзины в localStorage при изменении\n  useEffect(() => {\n    localStorage.setItem('cart', JSON.stringify(cart));\n\n    // Пересчитываем общую сумму и количество товаров\n    const newTotal = cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\n    const newTotalItems = cart.reduce((sum, item) => sum + item.quantity, 0);\n    setTotal(newTotal);\n    setTotalItems(newTotalItems);\n  }, [cart]);\n\n  // Добавление товара в корзину\n  const addToCart = (product, quantity) => {\n    setCart(prevCart => {\n      // Проверяем, есть ли уже такой товар в корзине\n      const existingItemIndex = prevCart.findIndex(item => item.product._id === product._id);\n      if (existingItemIndex !== -1) {\n        // Товар уже есть в корзине, обновляем количество\n        const updatedCart = [...prevCart];\n        const newQuantity = updatedCart[existingItemIndex].quantity + quantity;\n\n        // Проверяем, не превышает ли новое количество доступное на складе\n        updatedCart[existingItemIndex].quantity = Math.min(newQuantity, product.countInStock);\n        return updatedCart;\n      } else {\n        // Товара нет в корзине, добавляем новый\n        return [...prevCart, {\n          product,\n          quantity: Math.min(quantity, product.countInStock)\n        }];\n      }\n    });\n  };\n\n  // Удаление товара из корзины\n  const removeFromCart = productId => {\n    setCart(prevCart => prevCart.filter(item => item.product._id !== productId));\n  };\n\n  // Обновление количества товара в корзине\n  const updateQuantity = (productId, quantity) => {\n    if (quantity <= 0) {\n      removeFromCart(productId);\n      return;\n    }\n    setCart(prevCart => {\n      return prevCart.map(item => {\n        if (item.product._id === productId) {\n          // Проверяем, не превышает ли новое количество доступное на складе\n          const newQuantity = Math.min(quantity, item.product.countInStock);\n          return {\n            ...item,\n            quantity: newQuantity\n          };\n        }\n        return item;\n      });\n    });\n  };\n\n  // Очистка корзины\n  const clearCart = () => {\n    setCart([]);\n  };\n  const value = {\n    cart,\n    addToCart,\n    removeFromCart,\n    updateQuantity,\n    clearCart,\n    total,\n    totalItems\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 10\n  }, this);\n};\n_s2(CartProvider, \"U/1JVFhy5PV3N1JLBHK1FG24C+U=\");\n_c = CartProvider;\nexport default CartContext;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","CartContext","undefined","useCart","_s","context","Error","CartProvider","children","_s2","cart","setCart","total","setTotal","totalItems","setTotalItems","savedCart","localStorage","getItem","parsedCart","JSON","parse","error","console","setItem","stringify","newTotal","reduce","sum","item","product","price","quantity","newTotalItems","addToCart","prevCart","existingItemIndex","findIndex","_id","updatedCart","newQuantity","Math","min","countInStock","removeFromCart","productId","filter","updateQuantity","map","clearCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Данил Тимеев/Documents/GitHub/DVIG/client/src/contexts/CartContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\n// Типы для товаров в корзине\r\ninterface Product {\r\n  _id: string;\r\n  name: string;\r\n  image: string;\r\n  price: number;\r\n  countInStock: number;\r\n}\r\n\r\ninterface CartItem {\r\n  product: Product;\r\n  quantity: number;\r\n}\r\n\r\ninterface CartContextType {\r\n  cart: CartItem[];\r\n  addToCart: (product: Product, quantity: number) => void;\r\n  removeFromCart: (productId: string) => void;\r\n  updateQuantity: (productId: string, quantity: number) => void;\r\n  clearCart: () => void;\r\n  total: number;\r\n  totalItems: number;\r\n}\r\n\r\nconst CartContext = createContext<CartContextType | undefined>(undefined);\r\n\r\nexport const useCart = () => {\r\n  const context = useContext(CartContext);\r\n  if (!context) {\r\n    throw new Error('useCart must be used within a CartProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const CartProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [cart, setCart] = useState<CartItem[]>([]);\r\n  const [total, setTotal] = useState(0);\r\n  const [totalItems, setTotalItems] = useState(0);\r\n\r\n  // Загрузка корзины из localStorage при инициализации\r\n  useEffect(() => {\r\n    const savedCart = localStorage.getItem('cart');\r\n    if (savedCart) {\r\n      try {\r\n        const parsedCart = JSON.parse(savedCart);\r\n        setCart(parsedCart);\r\n      } catch (error) {\r\n        console.error('Ошибка при загрузке корзины:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Сохранение корзины в localStorage при изменении\r\n  useEffect(() => {\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n    \r\n    // Пересчитываем общую сумму и количество товаров\r\n    const newTotal = cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\r\n    const newTotalItems = cart.reduce((sum, item) => sum + item.quantity, 0);\r\n    \r\n    setTotal(newTotal);\r\n    setTotalItems(newTotalItems);\r\n  }, [cart]);\r\n\r\n  // Добавление товара в корзину\r\n  const addToCart = (product: Product, quantity: number) => {\r\n    setCart(prevCart => {\r\n      // Проверяем, есть ли уже такой товар в корзине\r\n      const existingItemIndex = prevCart.findIndex(item => item.product._id === product._id);\r\n      \r\n      if (existingItemIndex !== -1) {\r\n        // Товар уже есть в корзине, обновляем количество\r\n        const updatedCart = [...prevCart];\r\n        const newQuantity = updatedCart[existingItemIndex].quantity + quantity;\r\n        \r\n        // Проверяем, не превышает ли новое количество доступное на складе\r\n        updatedCart[existingItemIndex].quantity = Math.min(newQuantity, product.countInStock);\r\n        \r\n        return updatedCart;\r\n      } else {\r\n        // Товара нет в корзине, добавляем новый\r\n        return [...prevCart, { product, quantity: Math.min(quantity, product.countInStock) }];\r\n      }\r\n    });\r\n  };\r\n\r\n  // Удаление товара из корзины\r\n  const removeFromCart = (productId: string) => {\r\n    setCart(prevCart => prevCart.filter(item => item.product._id !== productId));\r\n  };\r\n\r\n  // Обновление количества товара в корзине\r\n  const updateQuantity = (productId: string, quantity: number) => {\r\n    if (quantity <= 0) {\r\n      removeFromCart(productId);\r\n      return;\r\n    }\r\n    \r\n    setCart(prevCart => {\r\n      return prevCart.map(item => {\r\n        if (item.product._id === productId) {\r\n          // Проверяем, не превышает ли новое количество доступное на складе\r\n          const newQuantity = Math.min(quantity, item.product.countInStock);\r\n          return { ...item, quantity: newQuantity };\r\n        }\r\n        return item;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Очистка корзины\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  const value = {\r\n    cart,\r\n    addToCart,\r\n    removeFromCart,\r\n    updateQuantity,\r\n    clearCart,\r\n    total,\r\n    totalItems,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n\r\nexport default CartContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}