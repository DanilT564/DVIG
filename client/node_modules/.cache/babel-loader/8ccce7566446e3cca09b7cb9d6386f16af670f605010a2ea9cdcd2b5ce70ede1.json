{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Создаем экземпляр axios с базовым URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Интерцептор для добавления токена в запросы\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Интерфейсы для данных\n\n// API сервисы\nexport const motorService = {\n  // Получение всех моторов с фильтрацией\n  getAllMotors: async params => {\n    const response = await api.get('/motors', {\n      params\n    });\n    return response.data;\n  },\n  // Получение мотора по ID\n  getMotorById: async id => {\n    const response = await api.get(`/motors/${id}`);\n    return response.data;\n  },\n  // Получение топовых моторов\n  getTopMotors: async () => {\n    const response = await api.get('/motors/top');\n    return response.data;\n  },\n  // Получение моторов по категории\n  getMotorsByCategory: async category => {\n    const response = await api.get(`/motors/category/${category}`);\n    return response.data;\n  },\n  // Получение категорий моторов\n  getMotorCategories: async () => {\n    const response = await api.get('/motors/categories');\n    return response.data;\n  },\n  // Получение брендов моторов\n  getMotorBrands: async () => {\n    const response = await api.get('/motors/brands');\n    return response.data;\n  },\n  // Получение производителей моторов\n  getMotorManufacturers: async () => {\n    const response = await api.get('/motors/manufacturers');\n    return response.data;\n  },\n  // Создание отзыва о моторе\n  createMotorReview: async (id, review) => {\n    const response = await api.post(`/motors/${id}/reviews`, review);\n    return response.data;\n  }\n};\nexport const orderService = {\n  // Создание заказа\n  createOrder: async orderData => {\n    const response = await api.post('/orders', orderData);\n    return response.data;\n  },\n  // Получение заказа по ID\n  getOrderById: async id => {\n    const response = await api.get(`/orders/${id}`);\n    return response.data;\n  },\n  // Получение заказов пользователя\n  getUserOrders: async () => {\n    const response = await api.get('/orders/myorders');\n    return response.data;\n  },\n  // Обновление статуса оплаты заказа\n  updateOrderToPaid: async (id, paymentResult) => {\n    const response = await api.put(`/orders/${id}/pay`, paymentResult);\n    return response.data;\n  }\n};\nexport const userService = {\n  // Получение профиля пользователя\n  getUserProfile: async () => {\n    const response = await api.get('/users/profile');\n    return response.data;\n  },\n  // Обновление профиля пользователя\n  updateUserProfile: async userData => {\n    const response = await api.put('/users/profile', userData);\n    return response.data;\n  }\n};\nexport const adminService = {\n  // Получение всех пользователей (только для администратора)\n  getAllUsers: async () => {\n    const response = await api.get('/admin/users');\n    return response.data;\n  },\n  // Удаление пользователя (только для администратора)\n  deleteUser: async id => {\n    const response = await api.delete(`/admin/users/${id}`);\n    return response.data;\n  },\n  // Получение пользователя по ID (только для администратора)\n  getUserById: async id => {\n    const response = await api.get(`/admin/users/${id}`);\n    return response.data;\n  },\n  // Обновление пользователя (только для администратора)\n  updateUser: async (id, userData) => {\n    const response = await api.put(`/admin/users/${id}`, userData);\n    return response.data;\n  },\n  // Создание нового мотора (только для администратора)\n  createMotor: async motorData => {\n    const response = await api.post('/motors', motorData);\n    return response.data;\n  },\n  // Удаление мотора (только для администратора)\n  deleteMotor: async id => {\n    const response = await api.delete(`/motors/${id}`);\n    return response.data;\n  },\n  // Обновление мотора (только для администратора)\n  updateMotor: async (id, motorData) => {\n    const response = await api.put(`/motors/${id}`, motorData);\n    return response.data;\n  },\n  // Получение всех заказов (только для администратора)\n  getAllOrders: async () => {\n    const response = await api.get('/admin/orders');\n    return response.data;\n  },\n  // Обновление статуса доставки заказа (только для администратора)\n  updateOrderToDelivered: async id => {\n    const response = await api.put(`/admin/orders/${id}/deliver`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","motorService","getAllMotors","params","response","get","data","getMotorById","id","getTopMotors","getMotorsByCategory","category","getMotorCategories","getMotorBrands","getMotorManufacturers","createMotorReview","review","post","orderService","createOrder","orderData","getOrderById","getUserOrders","updateOrderToPaid","paymentResult","put","userService","getUserProfile","updateUserProfile","userData","adminService","getAllUsers","deleteUser","delete","getUserById","updateUser","createMotor","motorData","deleteMotor","updateMotor","getAllOrders","updateOrderToDelivered"],"sources":["C:/Users/Данил Тимеев/Documents/GitHub/DVIG/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Создаем экземпляр axios с базовым URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Интерцептор для добавления токена в запросы\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Интерфейсы для данных\r\nexport interface Motor {\r\n  _id: string;\r\n  name: string;\r\n  description: string;\r\n  price: number;\r\n  image: string;\r\n  images: string[];\r\n  brand: string;\r\n  category: string;\r\n  manufacturer: string;\r\n  power: number;\r\n  weight: number;\r\n  dimensions: {\r\n    length: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n  voltage?: number;\r\n  rpm?: number;\r\n  efficiency?: number;\r\n  fuelType?: string;\r\n  yearOfManufacture?: number;\r\n  warranty?: number;\r\n  countInStock: number;\r\n  rating: number;\r\n  numReviews: number;\r\n  reviews: Review[];\r\n  features: string[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Review {\r\n  _id: string;\r\n  user: {\r\n    _id: string;\r\n    name: string;\r\n  };\r\n  rating: number;\r\n  comment: string;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface Order {\r\n  _id: string;\r\n  user: string;\r\n  items: {\r\n    motor: Motor;\r\n    quantity: number;\r\n    price: number;\r\n  }[];\r\n  shippingAddress: {\r\n    address: string;\r\n    city: string;\r\n    postalCode: string;\r\n    country: string;\r\n  };\r\n  paymentMethod: string;\r\n  paymentResult?: {\r\n    id: string;\r\n    status: string;\r\n    updateTime: string;\r\n  };\r\n  totalPrice: number;\r\n  isPaid: boolean;\r\n  isDelivered: boolean;\r\n  paidAt?: string;\r\n  deliveredAt?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\n// API сервисы\r\nexport const motorService = {\r\n  // Получение всех моторов с фильтрацией\r\n  getAllMotors: async (params?: {\r\n    page?: number;\r\n    keyword?: string;\r\n    category?: string;\r\n    brand?: string;\r\n    manufacturer?: string;\r\n    minPrice?: number;\r\n    maxPrice?: number;\r\n    minPower?: number;\r\n    maxPower?: number;\r\n    sortBy?: string;\r\n  }) => {\r\n    const response = await api.get('/motors', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Получение мотора по ID\r\n  getMotorById: async (id: string) => {\r\n    const response = await api.get(`/motors/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение топовых моторов\r\n  getTopMotors: async () => {\r\n    const response = await api.get('/motors/top');\r\n    return response.data;\r\n  },\r\n\r\n  // Получение моторов по категории\r\n  getMotorsByCategory: async (category: string) => {\r\n    const response = await api.get(`/motors/category/${category}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение категорий моторов\r\n  getMotorCategories: async () => {\r\n    const response = await api.get('/motors/categories');\r\n    return response.data;\r\n  },\r\n\r\n  // Получение брендов моторов\r\n  getMotorBrands: async () => {\r\n    const response = await api.get('/motors/brands');\r\n    return response.data;\r\n  },\r\n\r\n  // Получение производителей моторов\r\n  getMotorManufacturers: async () => {\r\n    const response = await api.get('/motors/manufacturers');\r\n    return response.data;\r\n  },\r\n\r\n  // Создание отзыва о моторе\r\n  createMotorReview: async (id: string, review: { rating: number; comment: string; name?: string }) => {\r\n    const response = await api.post(`/motors/${id}/reviews`, review);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const orderService = {\r\n  // Создание заказа\r\n  createOrder: async (orderData: {\r\n    items: { motorId: string; quantity: number }[];\r\n    shippingAddress: {\r\n      address: string;\r\n      city: string;\r\n      postalCode: string;\r\n      country: string;\r\n    };\r\n    paymentMethod: string;\r\n  }) => {\r\n    const response = await api.post('/orders', orderData);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение заказа по ID\r\n  getOrderById: async (id: string) => {\r\n    const response = await api.get(`/orders/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение заказов пользователя\r\n  getUserOrders: async () => {\r\n    const response = await api.get('/orders/myorders');\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление статуса оплаты заказа\r\n  updateOrderToPaid: async (id: string, paymentResult: { id: string; status: string; updateTime: string }) => {\r\n    const response = await api.put(`/orders/${id}/pay`, paymentResult);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const userService = {\r\n  // Получение профиля пользователя\r\n  getUserProfile: async () => {\r\n    const response = await api.get('/users/profile');\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление профиля пользователя\r\n  updateUserProfile: async (userData: { name?: string; email?: string; password?: string }) => {\r\n    const response = await api.put('/users/profile', userData);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const adminService = {\r\n  // Получение всех пользователей (только для администратора)\r\n  getAllUsers: async () => {\r\n    const response = await api.get('/admin/users');\r\n    return response.data;\r\n  },\r\n\r\n  // Удаление пользователя (только для администратора)\r\n  deleteUser: async (id: string) => {\r\n    const response = await api.delete(`/admin/users/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение пользователя по ID (только для администратора)\r\n  getUserById: async (id: string) => {\r\n    const response = await api.get(`/admin/users/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление пользователя (только для администратора)\r\n  updateUser: async (id: string, userData: { name?: string; email?: string; isAdmin?: boolean }) => {\r\n    const response = await api.put(`/admin/users/${id}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Создание нового мотора (только для администратора)\r\n  createMotor: async (motorData: Partial<Motor>) => {\r\n    const response = await api.post('/motors', motorData);\r\n    return response.data;\r\n  },\r\n\r\n  // Удаление мотора (только для администратора)\r\n  deleteMotor: async (id: string) => {\r\n    const response = await api.delete(`/motors/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление мотора (только для администратора)\r\n  updateMotor: async (id: string, motorData: Partial<Motor>) => {\r\n    const response = await api.put(`/motors/${id}`, motorData);\r\n    return response.data;\r\n  },\r\n\r\n  // Получение всех заказов (только для администратора)\r\n  getAllOrders: async () => {\r\n    const response = await api.get('/admin/orders');\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление статуса доставки заказа (только для администратора)\r\n  updateOrderToDelivered: async (id: string) => {\r\n    const response = await api.put(`/admin/orders/${id}/deliver`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}